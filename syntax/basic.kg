extern panic: (int) -> int
extern print: (string) -> int
extern int_to_string: (int) -> string

enum Sequence
	Cons(int, Sequence),
	Nil
end

let rec length = function(seq: Sequence): int
	case seq of
		Sequence.Cons(num, tail) -> 1 + length(tail),
		Sequence.Nil -> 0
	end
end

let rec map = function(seq: Sequence, f: (int) -> int): Sequence
    case seq of
        Sequence.Cons(num, tail) -> Sequence.Cons(f(num), map(tail, f)),
        Sequence.Nil -> Nil
    end
end

let rec filter = function(seq: Sequence, f: (int) -> bool): Sequence 
	case seq of
		Sequence.Cons(num, tail) ->
			let filtered_tail = filter(tail, f)
			if f(num) then Sequence.Cons(num, filtered_tail)
			else filtered_tail,
		Sequence.Nil -> seq
	end
end

let rec print_list = function(seq: Sequence): int
    case seq of
        Sequence.Cons(num, tail) ->
            let res = print(int_to_string(num))
            print_list(tail),
        Sequence.Nil -> 0
    end
end

let initial_list = Sequence.Cons(1, Sequence.Cons(3, Sequence.Cons(3, Sequence.Cons(3, Sequence.Cons(5, Sequence.Nil)))))

print_list(
    filter(
        initial_list,
        function(i: int): bool 
            i == 3 
        end
    )
)
