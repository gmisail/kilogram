use super::ast::{BinaryOperator, LogicalOperator, UnaryOperator};
use super::datatype::Type;

///
/// A type tree is an AST that contains type information. It is generated by the typechecker during the checking phase of the compiler.
///
pub enum TypeExpression {
    // Literals
    Integer(Type, i32),
    Float(Type, f32),
    Str(Type, String),
    Boolean(Type, bool),
    Variable(Type, String),
    Group(Type, Box<TypeExpression>),

    Get(Type, String, Box<TypeExpression>),

    RecordDeclaration(String, Vec<(String, Type)>, Box<TypeExpression>),
    RecordInstance(String, Vec<(String, Box<TypeExpression>)>),

    FunctionCall(Type, Box<TypeExpression>, Vec<Box<TypeExpression>>),

    Unary(Type, Box<TypeExpression>, UnaryOperator),
    Binary(
        Type,
        Box<TypeExpression>,
        BinaryOperator,
        Box<TypeExpression>,
    ),
    Logical(
        Type,
        Box<TypeExpression>,
        LogicalOperator,
        Box<TypeExpression>,
    ),

    If(
        Type,
        Box<TypeExpression>,
        Box<TypeExpression>,
        Box<TypeExpression>,
    ),

    Let(String, Type, Box<TypeExpression>, Box<TypeExpression>, bool),
    Function(String, Type, Vec<(String, Type)>, Box<TypeExpression>),
}
